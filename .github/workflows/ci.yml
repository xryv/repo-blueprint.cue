name: CI
on:
  push:
    branches: [ main, master ]
  pull_request:

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest]
        version: [20, 22]
    steps:
      - uses: actions/checkout@v4
      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.version }}
      - uses: actions/cache@v4
        with:
          path: |
            node_modules
            ~/.cache/pip
          key: ${{ runner.os }}-${{ matrix.version }}-${{ hashFiles('**/lock*', '**/package-lock.json', '**/poetry.lock') }}
      - name: Lint (bash)
        if: runner.os != 'Windows'
        shell: bash
        run: |
          if command -v npm >/dev/null 2>&1; then npm run -s lint || echo "no lint script"; 
          elif command -v pip >/dev/null 2>&1; then echo "add flake8/ruff here"; 
          else echo "no linter configured"; fi || true
      - name: Lint (pwsh)
        if: runner.os == 'Windows'
        shell: pwsh
        continue-on-error: true
        run: |
          $ErrorActionPreference = 'Continue'
          if (Get-Command npm -ErrorAction SilentlyContinue) {
            npm run -s lint; if ($LASTEXITCODE -ne 0) { Write-Host 'no lint script' }
          } elseif (Get-Command pip -ErrorAction SilentlyContinue) {
            Write-Host 'add flake8/ruff here'
          } else {
            Write-Host 'no linter configured'
          }
          $global:LASTEXITCODE = 0
      - name: Test (bash)
        if: runner.os != 'Windows'
        shell: bash
        run: |
          if command -v npm >/dev/null 2>&1; then npm test --silent || echo "no test script"; 
          elif command -v pytest >/dev/null 2>&1; then pytest -q || echo "tests failed (ignored for template)"; 
          else echo "add tests here"; fi || true
      - name: Test (pwsh)
        if: runner.os == 'Windows'
        shell: pwsh
        continue-on-error: true
        run: |
          $ErrorActionPreference = 'Continue'
          if (Get-Command npm -ErrorAction SilentlyContinue) {
            npm test --silent; if ($LASTEXITCODE -ne 0) { Write-Host 'no test script' }
          } elseif (Get-Command pytest -ErrorAction SilentlyContinue) {
            pytest -q; if ($LASTEXITCODE -ne 0) { Write-Host 'tests failed (ignored for template)' }
          } else {
            Write-Host 'add tests here'
          }
          $global:LASTEXITCODE = 0
